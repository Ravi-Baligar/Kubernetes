# Deployment: 

- A Deployment manages a set of Pods to run an application workload, usually one that doesn't maintain state.
- A Deployment provides declarative updates for Pods and ReplicaSets(Replicaset ensure that specified number of pod replica running at one time )
- Deployment will create the ReplicaSets which is kubernetes controller which handling the auto healing feature of the pod
- Deployment ---> ReplicaSets ----> pod
- Deployment will create ReplicaSets and Replicasets will create the pod
- A Deployment is a high-level object in Kubernetes that:
1.   Manages replica sets and pods	
2.   Ensures the desired number of identical Pods are always running
3. Supports rolling updates, rollbacks, and self-healing

- **Named API Groups:** Most other resources belong to named API groups. For example:

- `apps/v1`: For Deployments, ReplicaSets, DaemonSets, StatefulSets. This is a very common and stable API version.
- `batch/v1`: For Jobs.
- `batch/v1beta1` (or newer stable versions like `batch/v1` for CronJobs): For CronJobs.
- `autoscaling/v1` or `autoscaling/v2`: For HorizontalPodAutoscalers.
- `networking.k8s.io/v1`: For Ingress, NetworkPolicy.
- `rbac.authorization.k8s.io/v1`: For Role, RoleBinding, ClusterRole, ClusterRoleBinding.
- `apiextensions.k8s.io/v1`: For CustomResourceDefinitions (CRDs).
- `storage.k8s.io/v1`: For StorageClasses, PersistentVolumes.
- `policy/v1`: For PodDisruptionBudgets.



## Example:

![](/home/ravi/Pictures/Screenshots/Screenshot from 2025-07-02 23-37-23.png)

When delete the one pod manually or due some issue pod will created immediately. You can see in the below image 

![](/home/ravi/Pictures/Screenshots/autoHealing.png)



Example With replicasets as 3 (Meaning running 3 pods ). I deleted one pod manually and it will created automatically by feature called **Auto healing** --> Like Zero down disturbance 



![](/home/ravi/Pictures/Screenshots/AutoHealing with 3 pods.png)



### Scaling Down a Deployment (Effectively "Stopping" it)



This is the recommended way to temporarily halt a deployment without fully removing its configuration.

**Command:**

- kubectl scale deployment <deployment-name> --replicas=0 -n <namespace>
- example : 

ravi@ravi-VirtualBox:~/GIT/Deployement$ kubectl get pods --all-namespaces  
NAMESPACE     NAME                                READY   STATUS    RESTARTS        AGE
default       nginx-deployment-647677fc66-7q4w9   1/1     Running   0               32h
default       nginx-deployment-647677fc66-tx4f4   1/1     Running   0               32h
default       nginx-deployment-647677fc66-w6nmk   1/1     Running   0               32h
kube-system   coredns-674b8bbfcf-zshx9            1/1     Running   0               7d11h
kube-system   etcd-minikube                       1/1     Running   0               7d11h
kube-system   kube-apiserver-minikube             1/1     Running   0               7d11h
kube-system   kube-controller-manager-minikube    1/1     Running   2 (7d11h ago)   7d11h
kube-system   kube-proxy-hndn6                    1/1     Running   0               7d11h
kube-system   kube-scheduler-minikube             1/1     Running   0               7d11h
kube-system   storage-provisioner                 1/1     Running   1 (7d11h ago)   7d11h

**ravi@ravi-VirtualBox:~/GIT/Deployement$ kubectl scale deployment nginx-deployment --replicas=0 -n default**
deployment.apps/nginx-deployment scaled


