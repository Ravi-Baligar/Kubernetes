# ISTIO

**Istio** is an **open-source service mesh** that helps you manage, secure, and monitor microservices in Kubernetes (K8s) or other containerized environments.

------

### üîç **What is a Service Mesh?**

A **service mesh** is a dedicated infrastructure layer that controls **service-to-service communication** in a microservices architecture.

------

### üöÄ **What is Istio?**

**Istio** provides a **transparent layer** that sits between services and **manages communication** without requiring changes to your application code. It does this using **sidecar proxies** (usually Envoy) that intercept all traffic to and from a service.

------

### ‚úÖ **Why is Istio used in Kubernetes?**

#### 1. **Traffic Management**

- Control **routing**, **retries**, **timeouts**, and **canary deployments**
- Apply **blue/green** and **A/B testing** easily

#### 2. **Security**

- **mTLS encryption** (mutual TLS) between services
- Enforce **authentication**, **authorization**, and **policies**

#### 3. **Observability**

- Detailed **metrics**, **logs**, and **tracing** using tools like:
  - **Prometheus**, **Grafana**
  - **Jaeger**, **Kiali**

#### 4. **Resilience**

- Automatic **retries**, **failovers**, and **circuit breakers**
- Helps in making services **fault-tolerant**

#### 5. **Policy Enforcement**

- Control who can access what, when, and how
- Define rules like rate-limiting, quotas, etc.

------

### üß± **How Istio Works in K8s**

1. Each pod gets a **sidecar proxy (Envoy)** injected automatically
2. All traffic is routed through these proxies
3. You define Istio configurations using **Kubernetes CRDs** like:
   - `VirtualService`, `DestinationRule`, `Gateway`, etc.

------

### üß† **Example Use Case**

If you want to:

- Deploy version **v2** of a service and send only **10% of traffic** to it
- Enforce **encryption** between services without modifying the code
- Monitor **latency** between services

‚Üí Istio makes all of this **declarative and policy-driven** in Kubernetes.



## üß† **Istio Architecture Overview**

At a high level, Istio has two major components:

### 1. **Data Plane**

- Consists of **Envoy sidecar proxies** that:
  - Intercept all incoming/outgoing traffic from a pod
  - Handle **routing**, **load balancing**, **security**, etc.
- Proxies are **automatically injected** into application pods

### 2. **Control Plane**

- Manages the configuration and policies applied to the data plane
- Istio‚Äôs control plane is called **`istiod`** and it handles:
  - Service discovery (via Kubernetes)
  - Certificate generation (for mTLS)
  - Configuration distribution to Envoy proxies

------

## üõ†Ô∏è Step-by-Step: **How Istio Works in Kubernetes**

------

### üîπ Step 1: Istio Installation

When you install Istio via `istioctl` or Helm:

- It creates **Custom Resource Definitions (CRDs)** like `VirtualService`, `Gateway`, etc.
- Deploys the **`istiod`** control plane
- Optionally sets up automatic sidecar injection via a **MutatingAdmissionWebhook**

------

### üîπ Step 2: Sidecar Proxy Injection

- You **label your namespace** for injection:

  ```
  bash
  
  
  CopyEdit
  kubectl label namespace default istio-injection=enabled
  ```

- When you deploy a pod, Kubernetes calls Istio‚Äôs webhook to **inject the Envoy sidecar** into the pod.

- Now, your pod has **two containers**:

  - Your app container
  - Envoy proxy container (sidecar)

------

### üîπ Step 3: Service-to-Service Communication

#### Without Istio:

```
css


CopyEdit
Service A  -->  Service B
```

#### With Istio (Proxied through sidecars):

```
css


CopyEdit
Service A (App) --> Envoy A --> Envoy B --> Service B (App)
```

- **Envoy A** talks to **Envoy B** over **mTLS**
- `istiod` tells Envoy how to route, secure, and monitor this traffic

------

### üîπ Step 4: Traffic Management

Istio uses **CRDs** for fine-grained control over routing.

#### üî∏ VirtualService:

Defines **how to route** traffic to different versions of a service.

```
yamlCopyEditapiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: reviews-route
spec:
  hosts:
    - reviews
  http:
    - route:
        - destination:
            host: reviews
            subset: v1
          weight: 90
        - destination:
            host: reviews
            subset: v2
          weight: 10
```

#### üî∏ DestinationRule:

Defines **policies per version** (subsets).

```
yamlCopyEditapiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: reviews
spec:
  host: reviews
  subsets:
    - name: v1
      labels:
        version: v1
    - name: v2
      labels:
        version: v2
```

------

### üîπ Step 5: Security with mTLS

- Istio **automatically issues certificates** to all sidecars via `istiod`
- Enables **mutual TLS (mTLS)** for encryption and identity
- Enforce using `PeerAuthentication` and `AuthorizationPolicy` CRDs

```
yamlCopyEditapiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
spec:
  mtls:
    mode: STRICT
```

------

### üîπ Step 6: Observability

Istio provides **built-in telemetry** using:

- **Prometheus** ‚Äì metrics
- **Grafana** ‚Äì dashboards
- **Jaeger** or **Zipkin** ‚Äì distributed tracing
- **Kiali** ‚Äì Istio service graph visualization

Envoy proxies emit metrics and traces which are **collected and visualized**.

------

## üîê Example Traffic Flow with Istio

1. User hits your app (e.g., `frontend`)
2. Request goes through Ingress ‚Üí Istio Gateway ‚Üí Envoy sidecar of `frontend`
3. Envoy of `frontend` sends request to `backend` via Envoy of `backend`
4. All communication is encrypted (mTLS)
5. Traffic routing, retries, failovers are controlled via `VirtualService`
6. Logs, metrics, traces are emitted for observability

------

## üîÅ Summary

| Feature               | With Istio (vs K8s native)      |
| --------------------- | ------------------------------- |
| Routing control       | ‚úÖ Powerful (via VirtualService) |
| Encryption (mTLS)     | ‚úÖ Transparent & enforced        |
| Retries/Timeouts      | ‚úÖ Declarative policies          |
| Monitoring/Tracing    | ‚úÖ Built-in integrations         |
| Canary/BG deployments | ‚úÖ Easy with traffic splits      |





## ‚úÖ **Correct Flow (Simplified):**

### 1. **User Sends Request to API Server**

- e.g., `kubectl apply -f pod.yaml`
- Request is sent to **Kube API Server** via HTTP (usually `POST /api/v1/namespaces/default/pods`)

------

### 2. **Authentication & Authorization**

- API Server **authenticates** the user (e.g., via tokens, certs)
- Then checks if the user is **authorized** (RBAC/ABAC)

------

### 3. **Admission Controllers Run (Webhook Phase)**

- This happens **before** writing to etcd.
- Admission Controllers are split into:
  - **Mutating Admission Controllers** (modify request, e.g., inject sidecar)
  - **Validating Admission Controllers** (check policy compliance, etc.)

‚úîÔ∏è So yes ‚Äî request can be **mutated and/or validated** at this stage.

Examples:

- `MutatingAdmissionWebhook`: e.g., Istio sidecar injection
- `ValidatingAdmissionWebhook`: e.g., PodSecurityPolicies

------

### 4. **Schema Validation**

- Kubernetes **validates the resource schema** (e.g., correct fields, types)

------

### 5. **Store in etcd**

- Once everything is successful, the final pod spec (possibly mutated) is **persisted in etcd**

------

### 6. **Scheduler Picks It Up**

- Scheduler sees the new Pod (in "Pending" state)
- Selects a node, updates the Pod‚Äôs `spec.nodeName`

------

### 7. **Kubelet Acts**

- On that node, **kubelet sees the assigned pod**
- Pulls the image, sets up networking, mounts volumes, starts the container