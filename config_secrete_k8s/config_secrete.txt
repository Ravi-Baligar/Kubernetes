#### Difference between config and secrete in K8s

In Kubernetes (K8s), both **ConfigMap** and **Secret** are used to inject configuration data into pods, but they serve different purposes and handle data differently:

------

### üîß **ConfigMap**

- **Purpose**: Store **non-sensitive** configuration data in key-value pairs.
- **Examples**:
  - Application settings (e.g., log levels, URLs)
  - Command-line arguments or environment variables
- **Storage**: Stored **in plain text** in etcd (Kubernetes internal database).
- **Use Cases**:
  - Customize app behavior without rebuilding images.
  - Externalize configuration from the container image.

------

### üîê **Secret**

- **Purpose**: Store **sensitive** data like passwords, tokens, and keys.
- **Examples**:
  - Database passwords
  - TLS certificates
  - API keys
- **Storage**: Stored **base64-encoded** (not encrypted by default, but can be encrypted at rest in etcd).
- **Use Cases**:
  - Securely pass credentials to pods.
  - Handle confidential data that shouldn‚Äôt be exposed.

**Example:**  When user create **config** file like config.yaml with some data and API server is  will store this in etcd in the form of Objects. But when store any info into **secrete** then API server will save this in etcd with a encrypted using rest. If someone get access to etcd also will not get any info or he should have the decrypt key to access. this is disadvantage in config.



1. Creating cm.yaml and deployemnt.yaml, inside deploment.yaml we can use the env variable used in cm.yaml like example db-port. And developer can use in thier appliaction like os.env.DB-PORT

   ravi@ravi-VirtualBox:~/Documents/kubernetes/config_secrete_k8s$ kubectl apply -f deployment.yaml 
   deployment.apps/sample-python-app unchanged
   ravi@ravi-VirtualBox:~/Documents/kubernetes/config_secrete_k8s$ kubectl get pods
   NAME                                 READY   STATUS    RESTARTS   AGE
   sample-python-app-7896b58944-2nkzt   1/1     Running   0          8m58s
   sample-python-app-7896b58944-6x2cc   1/1     Running   0          9m10s
   ravi@ravi-VirtualBox:~/Documents/kubernetes/config_secrete_k8s$ **kubectl exec -it sample-python-app-7896b58944-2nkzt -- /bin/bash**
   root@sample-python-app-7896b58944-2nkzt:/app# env | grep DB
   DB-PORT=3306

**There is problem in above method like due to some reasons if need to change the db-port name in cm.yaml file, until and unless you redeploy it will not take changes. we can't redeploy on the production server it will cause down time issue. to solve this volume mounts comes into picture.**



**Example:**  We can mount volume like below for the container. Now we can change the port in the cm.yaml file apply deplyoment will take the updated value.

ravi@ravi-VirtualBox:~/Documents/kubernetes/config_secrete_k8s$ kubectl exec -it sample-python-app-76bc84d96f-8jsnj -- cat /opt/db-port
**3306r**avi@ravi-VirtualBox:~/Documents/kubernetes/config_secrete_k8s$ kubectl exec -it sample-python-app-76bc84d96f-8jsnj -- cat /opt/db-port
ravi@ravi-VirtualBox:~/Documents/kubernetes/config_secrete_k8s$ kubectl exec -it sample-python-app-76bc84d96f-8jsnj -- cat /opt/db-port
**3308**

```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-python-app
  labels:
    app: sample-python-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-python-app
  template:
    metadata:
      labels:
        app: sample-python-app
    spec:
      containers:
      - name: python-app
        image: ravi3423/python-simple-app:latest
        volumeMounts:
          - name: db-connection
            mountPath: /opt

        ports:
        - containerPort: 8000

      volumes:
        - name: db-connection
          configMap:
            name: test-config

```




**Then with Secret:** now we can see that db-port with encrypted way

ravi@ravi-VirtualBox:~/Documents/kubernetes/config_secrete_k8s$ kubectl create secret generic test-secret --from-literal=db-port="3390"
secret/test-secret created
ravi@ravi-VirtualBox:~/Documents/kubernetes/config_secrete_k8s$ kubectl describe secret test-secret
Name:         test-secret
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data

**db-port:  4 bytes**
ravi@ravi-VirtualBox:~/Documents/kubernetes/config_secrete_k8s$ kubectl edit secret test-secret

now below we can see db-port with encrypted way.

```
# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
apiVersion: v1
data:
  db-port: MzM5MA==
kind: Secret
metadata:
  creationTimestamp: "2025-07-11T03:25:48Z"
  name: test-secret
  namespace: default
  resourceVersion: "235448"
  uid: 8649cd76-ee0a-4835-9cf8-0e56ac57a91c
type: Opaque

```



**By default k8s will not have strong encryption because some can also deocde the it. For strong encryption we have to hasicop vault or other tools to encrypt and give to etcd.**

ravi@ravi-VirtualBox:~/Documents/kubernetes/config_secrete_k8s$ echo MzM5MA== | base64 --decode
3390



##### Example of secret:

If you want to skip the Base64 encoding step, you can create the same Secret using the `kubectl create secret` command. For example:

```shell
kubectl create secret generic test-secret --from-literal='username=my-app' --from-literal='password=39528$vdg7Jb'
```

This is more convenient. The detailed approach shown earlier runs through each step explicitly to demonstrate what is happening

## Create a Pod that has access to the secret data through a Volume

Here is a configuration file you can use to create a Pod:

```
apiVersion: v1
kind: Pod
metadata:
  name: secret-test-pod
spec:
  containers:
    - name: test-container
      image: nginx
      volumeMounts:
        # name must match the volume name below
        - name: secret-volume
          mountPath: /etc/secret-volume
          readOnly: true
  # The secret data is exposed to Containers in the Pod through a Volume.
  volumes:
    - name: secret-volume
      secret:
        secretName: test-secret

```

